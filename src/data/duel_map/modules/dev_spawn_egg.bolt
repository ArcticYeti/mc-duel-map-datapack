# from dataclasses import dataclass
from typing import Callable
import ./events as events

# @dataclass
# class DevSpawnEgg:
# 	id: str
# 	spawn_egg_id: str
# 	on_use_callback: Callable

# 	_spawned_entity_tag: str = ''

# 	TAG_PREFIX: ClassVar[str] = 'dev.dev_spawn_egg'
# 	SPAWN_EGGS_DIR: ClassVar[str] = 'dev:give/dev_spawn_egg'

# 	def __post_init__(self):
# 		self._spawned_entity_tag = f"{self.TAG_PREFIX}.{self.id}"

# 		function f"{self.SPAWN_EGGS_DIR}/{self.id}":
# 			give @s f"{self.spawn_egg_id}"[	
# 				item_name=f'{{"color": "aqua", "text": "{self.id}"}}',
# 				entity_data={
# 					id: "minecraft:marker",
# 					Tags: [
# 						self._spawned_entity_tag
# 					]
# 				}
# 			] 1

# 		with events.tick():
# 			as @e[type=marker, tag=self._spawned_entity_tag] at @s:
# 				self.on_use_callback()
# 				kill @s

SPAWNED_MARKER_TAG_PREFIX = 'dev.dev_spawn_egg'
SPAWN_EGGS_API_DIR = 'dev:give/dev_spawn_egg'

def register_dev_spawn_egg(id: str, spawn_egg_id: str, on_use_callback: Callable | None):
	spawned_marker_tag = f"{SPAWNED_MARKER_TAG_PREFIX}.{id}"

	function f"{SPAWN_EGGS_API_DIR}/{id}":
		give @s f"{spawn_egg_id}"[	
			item_name=f'{{"color": "aqua", "text": "{id}"}}',
			entity_data={
				id: "minecraft:marker",
				Tags: [
					spawned_marker_tag
				]
			}
		] 1

	with events.tick():
		as @e[type=marker, tag=spawned_marker_tag] at @s:
			if on_use_callback != None:
				on_use_callback()
			kill @s
