from ./constants import GIVE_DIR
from ./generator_blocks import GENERATOR_POSSIBLE_BLOCKS_TAG_PATH
from ./utils import snake_to_title_case
import ./events as events

GENERATOR_EGG_INIT_TAG = 'generator_egg_init_tag'
GENERATOR_TAG = 'generator'
GENERATOR_ROOT_TAG = 'generator_root'
GENERATOR_TEXT_Y_OFFSET = 1.5
GENERATOR_ID_TAG_PREFIX = 'generator_id'

is_generator_tools_initialized: bool = false

def destroy_closest_generator(range: float):
	as @n[type=marker, tag=GENERATOR_ROOT_TAG, distance=(None, range)] at @s:
		positioned ~ ~GENERATOR_TEXT_Y_OFFSET ~:
			kill @n[type=text_display, tag=GENERATOR_TAG]
		
		setblock ~ ~ ~ minecraft:air destroy
		kill @s

def _generator_id_to_tag(generator_id: str) -> str:
	return f'{GENERATOR_ID_TAG_PREFIX}.{generator_id}'

def _generate_generator_tools():
	# Generator destroy tool
	DESTROY_GENERATOR_TAG = 'destroy_generator'
	GENERATOR_TOOL_INIT_TAG = 'generator_tool_init'

	function f'{GIVE_DIR}/destroy_generator':
		give @p mooshroom_spawn_egg[item_name='{"color":"red","text":"Destroy Generator"}',entity_data={id:"minecraft:marker",Tags:[DESTROY_GENERATOR_TAG, GENERATOR_TOOL_INIT_TAG]}] 1

	with events.tick():
		as @e[type=marker, tag=GENERATOR_TOOL_INIT_TAG]:
			# Generator destroy tool
			if entity @s[tag=DESTROY_GENERATOR_TAG] at @s:
				destroy_closest_generator(range=3.0)

				kill @s

			tag @s remove GENERATOR_TOOL_INIT_TAG

def _generate_spawn_egg_function(generator_id: str, generator_name: str, spawn_egg_id: str):
	append function f'{GIVE_DIR}/generator_spawn_egg/{generator_id}':
		give @p polar_bear_spawn_egg[
			item_name=f'[{{"color":"white","text": "Create: "}}, {{"color":"green","text": "{generator_name}"}}]',
			entity_data={
				id: "minecraft:marker",
				Tags: [
					_generator_id_to_tag(generator_id),
					GENERATOR_EGG_INIT_TAG,
					GENERATOR_TAG,
					GENERATOR_ROOT_TAG
				]
			}
		] 1

def _initialize_generator(generator_id: str, generator_name: str):
	summon text_display ~ ~GENERATOR_TEXT_Y_OFFSET ~ {
		billboard: "center",
		Tags: [
			_generator_id_to_tag(generator_id),
			GENERATOR_TAG
		],
		text: f'{{"color":"white", "text": "{generator_name}"}}'
	}

def create_generator(
	id: str,
	generated_block_id: str,
	spawn_egg_id: str = 'turtle_spawn_egg',
):
	global is_generator_tools_initialized
	
	if not is_generator_tools_initialized:
		is_generator_tools_initialized = true
		_generate_generator_tools()

	name = snake_to_title_case(id)
	_generate_spawn_egg_function(id, name, spawn_egg_id)

	with events.tick():
		as @e[type=marker, tag=_generator_id_to_tag(id), tag=GENERATOR_ROOT_TAG] at @s:
			# Generator init
			if entity @s[tag=GENERATOR_EGG_INIT_TAG]:
				_initialize_generator(id, name)
				tag @s remove GENERATOR_EGG_INIT_TAG

			# Block respawning
			unless block ~ ~ ~ f'#{GENERATOR_POSSIBLE_BLOCKS_TAG_PATH}':
				setblock ~ ~ ~ generated_block_id
