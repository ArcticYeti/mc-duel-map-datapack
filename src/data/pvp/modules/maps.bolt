from pvp:map_markers import
	show_map_markers,
	hide_map_markers,
	all_map_markers_selector,
	filter_map_marker_selector,
from pvp:teams import Team
from pvp:nexus import
	spawn_nexus,
	despawn_nexus,
	get_nexus_selector,
	get_nearest_nexus_selector,

MAP_MAX_SIZE_RADIUS = 100

loaded_map_ids = []
loaded_map_data = {}

def load_maps(raw_data: dict):
	for map_id, map_data in raw_data['maps'].items():
		loaded_map_ids.append(map_id)
		loaded_map_data[map_id] = map_data

def initialize_map(map_id: str):
	force_load_map_chunks(map_id)

	map_origin_pos = _get_map_data(map_id)['origin_pos']
	

	positioned map_origin_pos:
		hide_map_markers(MAP_MAX_SIZE_RADIUS)

		as all_map_markers_selector(MAP_MAX_SIZE_RADIUS) at @s:
			for team_id in Team.get_all():
				as filter_map_marker_selector('nexus', team_id):
					spawn_nexus(team_id)

	force_unload_map_chunks(map_id)

def reset_map(map_id: str):
	map_origin_pos = _get_map_data(map_id)['origin_pos']
	positioned map_origin_pos:
		show_map_markers(MAP_MAX_SIZE_RADIUS)

		as all_map_markers_selector(MAP_MAX_SIZE_RADIUS) at @s:
			if entity filter_map_marker_selector('nexus'):
				as get_nearest_nexus_selector():
					despawn_nexus()

def force_load_map_chunks(map_id: str):
	map_origin_pos = _get_map_data(map_id)['origin_pos']

	positioned map_origin_pos:
		forceload add ~MAP_MAX_SIZE_RADIUS ~MAP_MAX_SIZE_RADIUS ~-MAP_MAX_SIZE_RADIUS ~-MAP_MAX_SIZE_RADIUS
		
def force_unload_map_chunks(map_id: str):
	map_origin_pos = _get_map_data(map_id)['origin_pos']

	positioned map_origin_pos:
		forceload remove ~MAP_MAX_SIZE_RADIUS ~MAP_MAX_SIZE_RADIUS ~-MAP_MAX_SIZE_RADIUS ~-MAP_MAX_SIZE_RADIUS

def _get_map_data(map_id: str) -> dict:
	map_data = loaded_map_data.get(map_id)
	if map_data == None:
		throw_exception(f"Received invalid map ID of '{map_id}'")
	return map_data