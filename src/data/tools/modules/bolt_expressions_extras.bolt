from bolt_expressions import Data, ExpressionNode, ScoreSource, DataSource
from contextlib import contextmanager
from mecha import Mecha

mc = ctx.inject(Mecha)

this = Data.entity('@s')

def score_exists(score: ScoreSource) -> ScoreSource:
	return score == score

@contextmanager
def store(expression: ExpressionNode, mode='result', type='int', scale=1.0):
	if isinstance(expression, ScoreSource):
		holder = parse_holder(expression.holder)

		if mode == 'result':
			store result score holder expression.obj:
				yield True
		elif mode == 'success':
			store success score holder expression.obj:
				yield True

	elif isinstance(expression, DataSource):
		if expression._type == 'storage':
			if mode == 'result':
				if type == 'byte':
					store result storage expression._target expression._path byte scale:
						yield True
				elif type == 'double':
					store result storage expression._target expression._path double scale:
						yield True
				elif type == 'float':
					store result storage expression._target expression._path float scale:
						yield True
				elif type == 'int':
					store result storage expression._target expression._path int scale:
						yield True
				elif type == 'long':
					store result storage expression._target expression._path long scale:
						yield True
				elif type == 'short':
					store result storage expression._target expression._path short scale:
						yield True
			elif mode == 'success':
				if type == 'byte':
					store success storage expression._target expression._path byte scale:
						yield True
				elif type == 'double':
					store success storage expression._target expression._path double scale:
						yield True
				elif type == 'float':
					store success storage expression._target expression._path float scale:
						yield True
				elif type == 'int':
					store success storage expression._target expression._path int scale:
						yield True
				elif type == 'long':
					store success storage expression._target expression._path long scale:
						yield True
				elif type == 'short':
					store success storage expression._target expression._path short scale:
						yield True
		elif expression._type == 'entity':
			holder = parse_holder(expression._target)

			if mode == 'result':
				if type == 'byte':
					store result entity holder expression._path byte scale:
						yield True
				elif type == 'double':
					store result entity holder expression._path double scale:
						yield True
				elif type == 'float':
					store result entity holder expression._path float scale:
						yield True
				elif type == 'int':
					store result entity holder expression._path int scale:
						yield True
				elif type == 'long':
					store result entity holder expression._path long scale:
						yield True
				elif type == 'short':
					store result entity holder expression._path short scale:
						yield True
			elif mode == 'success':
				if type == 'byte':
					store success entity holder expression._path byte scale:
						yield True
				elif type == 'double':
					store success entity holder expression._path double scale:
						yield True
				elif type == 'float':
					store success entity holder expression._path float scale:
						yield True
				elif type == 'int':
					store success entity holder expression._path int scale:
						yield True
				elif type == 'long':
					store success entity holder expression._path long scale:
						yield True
				elif type == 'short':
					store success entity holder expression._path short scale:
						yield True
		elif expression._type == 'block':
			if mode == 'result':
				if type == 'byte':
					store result block expression._target expression._path byte scale:
						yield True
				elif type == 'double':
					store result block expression._target expression._path double scale:
						yield True
				elif type == 'float':
					store result block expression._target expression._path float scale:
						yield True
				elif type == 'int':
					store result block expression._target expression._path int scale:
						yield True
				elif type == 'long':
					store result block expression._target expression._path long scale:
						yield True
				elif type == 'short':
					store result block expression._target expression._path short scale:
						yield True
			elif mode == 'success':
				if type == 'byte':
					store success block expression._target expression._path byte scale:
						yield True
				elif type == 'double':
					store success block expression._target expression._path double scale:
						yield True
				elif type == 'float':
					store success block expression._target expression._path float scale:
						yield True
				elif type == 'int':
					store success block expression._target expression._path int scale:
						yield True
				elif type == 'long':
					store success block expression._target expression._path long scale:
						yield True
				elif type == 'short':
					store success block expression._target expression._path short scale:
						yield True

def parse_holder(holder: str):
	return mc.parse(holder, using="score_holder", provide={"properties":{"amount":"single"}})
