from mecha import AstSelector
from bolt_expressions import Data

LOGGER_MARKER_TAG = 'tools.logger'
LOGGER_MARKER = selector(f'@e[type=marker, tag={LOGGER_MARKER_TAG}]')

class LogLevel:
	INFO = 0
	WARN = 1
	ERROR = 2

log_level_colors: dict[LogLevel, str] = {
	LogLevel.INFO: 		'gray',
	LogLevel.WARN: 		'yellow',
	LogLevel.ERROR: 	'red',
}

log_level_prefixes: dict[LogLevel, str] = {
	LogLevel.INFO: 		'[info]',
	LogLevel.WARN: 		'[warn]',
	LogLevel.ERROR: 	'[error]',
}

def initialize_logger():
	forceload add 0 0

	unless entity LOGGER_MARKER:
		summon minecraft:marker 0 0 0 {
			CustomName: '{"text": "0", "color": "black"}',
			Tags: [LOGGER_MARKER_TAG]
		}

def log_chat(log_level: LogLevel, *segments):
	separator = {'text': ' '}
	message_prefix = log_level_prefixes[log_level]
	message_color = log_level_colors[log_level]
	message: list[dict[str, str]] = []
	parsed_selector_backlog: list[AstSelector] = []

	message.append({'text': message_prefix, 'color': message_color})
	message.append(separator)
		
	for segment_count, segment in enumerate(segments):
		if segment_count > 0:
			message.append(separator)
		
		if isinstance(segment, AstSelector):
			parsed_selector_backlog.append(segment)
			message.append({'text': f'[{len(parsed_selector_backlog)-1}]'})
		elif segment[0] == '@':		# string-based inline selector handling
			message.append({'text': '('})
			message.append({'selector': segment})
			message.append({'text': ')'})
		else:
			message.append({'text': segment})

	tellraw @a message

	as LOGGER_MARKER:
		logger_temp_data = Data.storage('tools:logger').temp
		logger_temp_data.macro_args = {'index': 0, 'color': message_color}
		logger_temp_data.macro_args.index = len(parsed_selector_backlog)

		with storage logger_temp_data.macro_args._target logger_temp_data.macro_args._path:
			$data modify entity @s CustomName set value '{"text": "$(index)", "color": "$(color)"}'

	as LOGGER_MARKER:
		for parsed_selector in parsed_selector_backlog:
			say parsed_selector